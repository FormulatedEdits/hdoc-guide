const fs = require('fs');
var path = require('path');
const stream = require('stream');
var express = require('express');

exports.run = function(ui_path, source_path, md) {
    console.log("Hornbill HDocBook Preview/Dev Server", "\r\n");
    console.log("    Server Path:", __dirname);
    console.log("   UI Root Path:", ui_path);
    console.log("  Document Path:", source_path, "\r\n");
    
    // Get an express server instance
    var app = express();
    
    // In the root of the project there is a hdocbook.json file which includes
    // the id of the hdocbook we are working with
    const hdocbook_project_config_path = path.join(source_path, "hdocbook-project.json");
    
    // Load the hdocbook config  file
    var hdocbook_project = require(hdocbook_project_config_path);
    
    // Get the ID of the hdocbook we are serving
    var docId = hdocbook_project.docId;
    
    // Get the path of the book.json file
    const hdocbook_path = path.join(source_path, docId, "hdocbook.json");
    
    // Pull in the book config file
    var hdocbook_config = require(hdocbook_path);
    var hdocbook_mtime = fs.statSync(hdocbook_path).mtime;
    
    app.get('/content/library.json', function (req, res) {
       let library = {
          books: [
             {
                docId: hdocbook_config.docId,
                title: hdocbook_config.title
             }
          ]
       }
       res.setHeader("Content-Type", "application/json");
       res.send(JSON.stringify(library, null, 3));
    });
    
    
    function content_type_for_ext(ext) {
       switch (ext)
       {
          case ".z":
             return "application/x-compress";
          case ".tgz":
             return "application/x-compressed";
          case ".gz":
             return "application/x-gzip";
          case ".zip":
             return "application/x-zip-compressed";
          case ".xml":
             return "application/xml";
          case ".bmp":
             return "image/bmp";
          case ".gif":
             return "image/gif";
          case ".jpg":
             return "image/jpeg";
          case ".png":
             return "image/png";
          case ".tiff":
             return "image/tiff";
          case ".ico":
             return "image/x-icon";
          case ".png":
             return "image/png";
          case ".svg":
             return "image/svg+xml";
          case ".css":
             return "text/css";
          case ".htm":
          case ".html":
             return "text/html";
          case ".txt":
             return "text/plain";
          case ".md":
             return "text/plain";
          case ".json":
             return "application/json";
          case ".js":
             return "application/javascript";
          default:
             return "application/octet-stream";
       }
    }
    
    function expand_variables(text) {
        // For debug mode our base path is our root??
        text = text.replaceAll("{{BASE_PATH}}", "/" + docId);
        text = text.replaceAll("{{BUILD_NUMBER}}", "0");
    
        let build_date = new Date().toISOString();
        build_date = build_date.replace('T', ' ');
        build_date = build_date.substring(0,19);
    
        text = text.replaceAll("{{BUILD_DATE}}", build_date);
        return text;
    }
    
    function transform_markdown_and_send_html(req, res, file_path) {
    
       if(fs.existsSync(file_path)) {
          // we have a markdown representation of the requested HTML file, transform and return
          // it to the caller
    
          // Load markdown file
          let md_txt = expand_variables(fs.readFileSync(file_path).toString());
    
          // Render markdown into HTML
          frontmatter_content = "";
          var html_txt = md.render(md_txt.toString());
    
          if(frontmatter_content.length) {
    
             const obj = yaml.load(frontmatter_content);
    
             const buff = Buffer.from(JSON.stringify(obj), 'utf-8');
    
             const base64 = buff.toString('base64');
    
             res.setHeader("X-frontmatter", base64);
          }
    
          res.setHeader("Content-Type", "text/html");
          res.send(html_txt);
          return true;
       }
       return false;
    }
    
    function send_content_file(req, res, file_path) {
       let content_txt = expand_variables(fs.readFileSync(file_path).toString());
    
       let contentType = content_type_for_ext(path.extname(file_path));
    
       if(path.extname(file_path) == ".md") {
          res.setHeader("Content-Disposition", "inline");
       }
    
       res.setHeader("Content-Type", contentType);
    
       res.send(content_txt);
    }
    
    function send_file(req, res, file_path) {
       // Need to set the content type here??
       let contentType = content_type_for_ext(path.extname(file_path));
       res.setHeader("Content-Type", contentType);
       
       const r = fs.createReadStream(file_path) 
       const ps = new stream.PassThrough() 
       stream.pipeline(
          r,
          ps, 
          (err) => {
          if (err) {
             console.log(err) // No such file or any other kind of error
             return res.sendStatus(400).send("Unexpected error"); 
          }
       })
       ps.pipe(res) 
    }
    
    function send_content_resource_404(req, res) {
       res.setHeader("Content-Type", "text/html");
       res.status(404).send("Content resource not found");
    }
    
    // 1. If we request a file with a .html file extension, and that file DOES NOT exist,
    // we will look for the same file but with a .md extension. If we find that 
    // corresponding markdown file, we will transform that markdown file to HTML and 
    // return the HTML content
    //
    // 2. If we request a file, without any file extension then we will look for that file
    // with a .md extension, and if that file exists, we will transform that markdown 
    // file to HTML and return that file. 
    //
    // For all other requests, we are going to look on the filesystem.  If we request 
    // a specific file with its extension (including .md files), then we will simply 
    // return the file verbatum as a static file.
    //
    // If we request a file without an extension and that file does not exist, we will
    // assume that is a folder, will append index.html and look for that file, if present
    // we will send it, if not present we will look for index.md, and if thats present 
    // we will transform to HTML and return that
    //
    // Anything else in this handler will return a 404 error
    
    app.get('/content/*', function (req, res) {
       
       let url = req.url;
    
       let segs = url.split('/');
    
       if(segs.length == 4 && segs[1] == "content" && segs[3] == "book.json") {
          // Special case of a virtual file here, we need to check  the book ID and
          // if its our book, send the json
          if(hdocbook_config.docId == segs[2]) {
             res.setHeader("Content-Type", "application/json");
             res.send(JSON.stringify(hdocbook_config, null, 3));
          } else {
             // Return a 404 error here
             res.setHeader("Content-Type", "text/html");
             res.status(404).send("Specified bookId " + segs[2] + " not found");
          }  
          return;
       } else if (segs.length == 3 && segs[1] == "content" && segs[2] == "index.json") {
          // For development mode, we always have an index with one book in it, the one being developed
          if (hdocbook_config) { 
             let index = {
                   books: [
                      {
                         docId: hdocbook_config.docId,
                         title: hdocbook_config.title,
                         description: hdocbook_config.description, 
                         version: hdocbook_config.version
                      }
                   ]
             };
             res.setHeader("Content-Type", "application/json");
             res.send(JSON.stringify(index, null, 3));
          } else {
             // Return a 404 error here
             res.setHeader("Content-Type", "text/html");
             res.status(404).send("Specified bookId " + segs[2] + " not found");
          }
          return;
       }
    
       url = url.replace("/content/", "/");
    
       console.log("URL Requested: ", url);
    
       let file_path = path.join(source_path, url);
       let ui_file_path = path.join(ui_path, url);
    
       // If the requested file is found in the UI folder
       if(url == "/") 
       {
          if(fs.existsSync(path.join(ui_file_path, "index.html"))) {
             // We want the index.html, send it here
             send_file(req, res, path.join(ui_file_path, "index.html"));
             return;
          }
          // Return a 404 error here
          send_content_resource_404(req, res);
          return;
       } else if(fs.existsSync(ui_file_path)) {
          // File is found in  the UI folder, that takes priority, send the file
          send_file(req, res, ui_file_path);
          return;
       }
    
       if(path.extname(file_path) == ".html") {
          // 1a. check for html files, and send/transform as required
          if(fs.existsSync(file_path)) {
             // HTML file exists on disk, just return it verbatum
             res.setHeader("Content-Type", "text/html");
             send_file(req, res, file_path);
             return true;
          } 
    
          if(fs.existsSync(file_path.replace(".html", ".md"))){
             if(transform_markdown_and_send_html(req, res, file_path.replace(".html", ".md"))) {
                return;
             }
          }
       } else if(path.extname(file_path) == ".md") {
          // If the markdown file exists, just send to caller as is
          if(fs.existsSync(file_path)) {
             send_content_file(req, res, file_path);
             return true;
          } 
       } else if(path.extname(file_path).length == 0) 
       {
          // 2. If we request a file, without any file extension
          if(fs.existsSync(file_path + ".md")) {
             if(transform_markdown_and_send_html(req, res, file_path + ".md")) {
                return;
             }
          } else if(fs.existsSync(path.join(file_path + "index.md"))) {
             if(transform_markdown_and_send_html(req, res, path.join(file_path, "index.md"))) {
                return;
             }
          } else if(fs.existsSync(path.join(file_path + "index.html"))) {
             console.log("jdhsfkjhdkjfhjkshdkfjhkjsdf", file_path);
             res.setHeader("Content-Type", "text/html");
             send_content_file(req, res, path.join(file_path + "index.html"));
             return;
          } else if(fs.existsSync(file_path + "/index.md")) {
             if(transform_markdown_and_send_html(req, res, file_path + "/index.md")) {
                return;
             }
          } else if(fs.existsSync(path.join(file_path + "/index.html"))) {
             res.setHeader("Content-Type", "text/html");
             send_content_file(req, res, path.join(file_path + "/index.html"));
             return;
          }
       } else if(fs.existsSync(file_path)) {
          send_file(req, res, file_path);
          return;
       }
    
       // Return a 404 error here
       send_content_resource_404(req, res);
    })
    
    // Cacth all
    app.get('/*', function (req, res) {
    
       let segs = req.url.split('/');
    
       if(segs.length > 3 && segs[2] == "content") {
          // In this case we are looking for static content within the book
    
          // Creat the file path
          let url = req.url.replace("/content/", "/");
          let file_path = path.join(source_path, url);
    
          // If the file exists, send it.
          if(fs.existsSync(file_path) == true) {
             send_file(req, res, file_path);
             return;
          }
    
          // All else fails, we have not file to return, so return a 404 error here
          send_content_resource_404(req, res);
          return;
       }
    
       let ui_file_path = path.join(ui_path, req.url);
    
       console.log("URL Root: ", req.url);
    
       // To suport the SPA application behaviour, if there is no file extension present, then
       // we simply return the /index.html file content to the client
       if(path.extname(ui_file_path).length == 0) {
          send_content_file(req, res, path.join(ui_path, "index.html"));
          return;
       } 
    
       // If the file exists, send it.
       if(fs.existsSync(ui_file_path) == true) {
          send_content_file(req, res, ui_file_path);
          return;
       }
    
       // All else fails, we have not file to return, so return a 404 error here
       send_content_resource_404(req, res);
    });
    
    var server = app.listen(3000, "0.0.0.0", function () {
       var host = server.address().address
       var port = server.address().port
       
       console.log("Server listening at http://%s:%s", host, port)
       console.log("Document source path is: " + source_path);
    })
    
}
